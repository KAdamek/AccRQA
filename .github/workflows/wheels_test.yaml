name: Build Python Wheel with CUDA and MS Visual Studio

#  push:
#    branches:
#      - main
on:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, ubuntu-18.04]
        python-version: [3.11]

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python 
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install CUDA Toolkit
      - name: Install CUDA Toolkit
        run: |
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/$(lsb_release -cs)/x86_64/7fa2af80.pub
          sudo sh -c "echo 'deb https://developer.download.nvidia.com/compute/cuda/repos/$(lsb_release -cs)/x86_64 /' > /etc/apt/sources.list.d/cuda.list"
          sudo apt-get update
          sudo apt-get -y install cuda

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install pipenv
          python -m pip install build

      # Step 5: Build the Python wheel
      - name: Build wheel
        run: |
          python -m build --outdir dist

      # Step 6: Store the built wheel as an artifact
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ matrix.os }}
          path: dist/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install CUDA Toolkit
      - name: Install CUDA Toolkit
        run: |
          choco install cuda -y

      # Step 4: Install MS Visual Studio Build Tools
      - name: Install Visual Studio Build Tools
        run: |
          choco install visualstudio2019buildtools -y
          choco install visualstudio2019-workload-vctools -y

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install pipenv
          python -m pip install build

      # Step 6: Build the Python wheel
      - name: Build wheel
        run: |
          python -m build --outdir dist

      # Step 7: Store the built wheel as an artifact
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-windows
          path: dist/*.whl
